Problem #1:

positions_of_large_groups:
    By creating two indices, one being one more than the other, you are able to compare one pair
    at a time. If the difference in the two indices is greater than 3 after checking if those 
    characters in those two spots are the same, then the indices are added into a list as 
    coordinates.

    Runtime Complexity:
        O(n)
        - Only iterating through the string once as the two if conditionals and checks are 
            happening at the same time. 

-------------------------------------

Problem #2:

valid_anagram
    Appropriate Data Set: Dictionary
        - keep count of the times a letter occurs in a string 
    
    If the key-value pairs of the two strings are identical or the contents of the 
    dictionary, then the strings are anagrams of each other. 

    Runtime Complexity:
        O(n^3)
        - You are iterating through a for loop once for each string to create a dictionary for each
            and then conducting a final for loop while comparing if the contents of both dictionaries 
            are equal. 

    Alternative Solutions:
        If sorted() is allowed: 
            - a list is created from both strings and then alphabeticallly ordered, so 
                you can compare if the two are identical.
         Runtime Complexity: O(nlog(n) + mlog(m))
            - You are sorting through each string, so the n and m denote the length of each string 
            respectively while the sorted() function is O(n log n) runtime. 

-------------------------------------
        
Problem #3:

longest_palindromic_substring
    A palindrome is a word that is identical to its reversed self. In code:
        word == word[::-1]

    In order to solve this problem, you are meant to save a variable for the longest palindrome with 
    an empty string. Then, you nest two for loops and check each substring you create to see if it's a 
    palindrome. You will continously compare this to the longest palindrome value and if the length is
    greater, the value is overwritten. 
    
    You exhaust all possible substrings by:
        - the first for loop being meant to exhaust all possible substrings by altering the start point (i)
        - the second for loop being meant to exhaust all possible substrings by altering the end point (j, 
        which will always be one more in value than the starting point or i)
    
    Runtime Complexity:
        O(n^3)
        - The nested for loop is a runtime of O(n^2) and then the if conditionals at the end to check
        the longest palindrome are conducted at the same time and only count as one full iteration, 
        resulting in O(n^3). 
 
-------------------------------------

Problem #4:

longest-substring-without-repeating-characters
    Appropriate Data Set: Set

    Similar to the problem above, you exhaust all options for a substring created from the original string
    using a nested for loop. However, converting the substring into a set prevents duplicates within the substring. 

    Runtime Complexity:
        O(n^3)
        - You are iterating through a for loop once for each string to create a dictionary for each
            and then conducting a final for loop while comparing if the contents of both dictionaries 
            are equal.


-------------------------------------

Problem #5: 

add_strings

    For this problem, the solution involves thinking of the traditional form of addition, using carry overs. 
    Because you work from the last place to the first logically, the problem calls for reversing the strings
    in a list. The carry-over is represented as a variable and only becomes one if the sum of the digits at 
    a given index is greater than 10. These are saved into a list and then returned at the end by iterating 
    through the list and returning a concatenated string of it. 

    Runtime Complexity:
        O(n^2)
        - After the synchronous conditional check of digits based on place from both numbers, the return 
            statement iterates through the list with the stored sums and returns a reversed string. 


-------------------------------------

Problem #6:

two_sum

    The solution involves merely looping through the list once and creating a variable containing the sum of 
        a number and the proceeding number. Because there is only one viable answer, return the first match 
        with the pair's sum and the target. 

    Runtime Complexity:
        O(n)
        - Generate an empty list to contain all possible matches. The first for loop looks for all possible
            matches within the given nums list and then the final return statement pops the first entry
            from the match list.

    Alternative Solutions:
        You can also use a dictionary: 
            - a dictionary stores every number in the given list as a key with its index as the value.
            - looking up the difference of a given number and checking if it exists as a key in the 
                dictionary will generate if there is a match.
        Runtime Complexity: O(n)
            - Only one for loop is requires and the lookup in a dictionary is O(1). 

        


